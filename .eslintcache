[{"C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\Input.jsx":"1","C:\\Work\\Vectary\\backup\\material_ui\\src\\index.js":"2","C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\LabeledSwitch.jsx":"3","C:\\Work\\Vectary\\backup\\material_ui\\src\\TestData\\DefaultData.js":"4","C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\Expand.jsx":"5","C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\AddMaterial.jsx":"6","C:\\Work\\Vectary\\backup\\material_ui\\src\\App.js":"7","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\TextureButton.jsx":"8","C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\MaterialList.jsx":"9","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\Material.jsx":"10","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\ColoredSlider.jsx":"11","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\popUpView.jsx":"12","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\GrowingInput.jsx":"13","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\RangeInput.jsx":"14","C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\TextSlider.jsx":"15","C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\LabeledInput.jsx":"16","C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\TexturePopup.jsx":"17","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\Switch.jsx":"18","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\GrowingInputByPercentage.jsx":"19","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\DashedLine.jsx":"20","C:\\Work\\Vectary\\backup\\material_ui\\src\\reducers\\MaterialPropertyReducer.jsx":"21","C:\\Work\\Vectary\\backup\\material_ui\\src\\TestData\\generators.jsx":"22","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\dropdown.jsx":"23"},{"size":7802,"mtime":1610552604707,"results":"24","hashOfConfig":"25"},{"size":718,"mtime":1610114473846,"results":"26","hashOfConfig":"25"},{"size":995,"mtime":1610362864192,"results":"27","hashOfConfig":"25"},{"size":8810,"mtime":1610369243197,"results":"28","hashOfConfig":"25"},{"size":942,"mtime":1610362481792,"results":"29","hashOfConfig":"25"},{"size":532,"mtime":1609763545216,"results":"30","hashOfConfig":"25"},{"size":9547,"mtime":1610550305713,"results":"31","hashOfConfig":"25"},{"size":865,"mtime":1610525829527,"results":"32","hashOfConfig":"25"},{"size":735,"mtime":1610529538283,"results":"33","hashOfConfig":"25"},{"size":1606,"mtime":1610528171043,"results":"34","hashOfConfig":"25"},{"size":3669,"mtime":1610023436721,"results":"35","hashOfConfig":"25"},{"size":1139,"mtime":1610098659398,"results":"36","hashOfConfig":"25"},{"size":6670,"mtime":1610538065446,"results":"37","hashOfConfig":"25"},{"size":6117,"mtime":1610552578127,"results":"38","hashOfConfig":"25"},{"size":5190,"mtime":1610362870507,"results":"39","hashOfConfig":"25"},{"size":5540,"mtime":1610548215470,"results":"40","hashOfConfig":"25"},{"size":5787,"mtime":1610543572917,"results":"41","hashOfConfig":"25"},{"size":1162,"mtime":1610353544886,"results":"42","hashOfConfig":"25"},{"size":8115,"mtime":1610549227374,"results":"43","hashOfConfig":"25"},{"size":197,"mtime":1610548403904,"results":"44","hashOfConfig":"25"},{"size":1224,"mtime":1610035606263,"results":"45","hashOfConfig":"25"},{"size":5837,"mtime":1610550284836,"results":"46","hashOfConfig":"25"},{"size":3249,"mtime":1610547224246,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11grfy6",{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"53"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"53"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"53"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"53"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"63"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\Input.jsx",["109","110","111","112"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\index.js",["113"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {TexturePoropertyProvider} from \"./context/texturePropertyContext\"\n\nconst reload = () => window.location.reload()\n\nReactDOM.render(\n  <React.StrictMode >\n    \n    <TexturePoropertyProvider>\n      \n            <App />\n      \n    </TexturePoropertyProvider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["114","115"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\LabeledSwitch.jsx",["116","117"],"import React, { useEffect, useState } from \"react\"\r\nimport { generateInputs, defaultInputs } from \"../TestData/generators\"\r\n\r\nimport Switch from \"../components/Switch\"\r\n\r\n\r\nfunction LabeledSwitch(props){\r\n    const {\r\n        label,\r\n        labelType,\r\n        padding,\r\n        handleChange,\r\n        input\r\n        } = props\r\n    const [inputs, setInputs] = useState([])\r\n    \r\n\r\n    useEffect(() => {\r\n       \r\n        setInputs(generateInputs(input  || defaultInputs.single(), \"switch\"))\r\n    }, [input])\r\n\r\n    return(\r\n        <div className={` ${padding && \"px-4 my-2\"} flex w-full h_24 normal-font font-semibold justify-between items-center text-almostBlack`}>\r\n\r\n            <p className={`${labelType === \"title\" ? \"font-semibold\" : \"font-normal\"}`}>{label}</p>\r\n            <div className=\"flex h_24\">\r\n                {inputs.map((elem, index) => {\r\n                    return elem\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default LabeledSwitch","C:\\Work\\Vectary\\backup\\material_ui\\src\\TestData\\DefaultData.js",["118","119","120"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\Expand.jsx",[],"C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\AddMaterial.jsx",[],["121","122"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\App.js",["123","124","125","126","127"],"import React, { useEffect, useRef, useContext, useState } from \"react\"\n\nimport {defaultInputs} from \"./TestData/generators\"\nimport _uniqueId from 'lodash/uniqueId';\nimport TextSlider from \"./containers/TextSlider\"\nimport TexturePopup from \"./containers/TexturePopup\"\nimport LabeledInput from \"./containers/LabeledInput\"\n\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Background from \"./img/Background.png\"\nimport Toolbar from \"./img/toolbar.png\"\nimport Navbar from \"./img/navBar.png\"\nimport leftSideBar from \"./img/leftSidebar.png\"\n\nimport MaterialList  from \"./containers/MaterialList\"\n\nimport {TexturePorpertyContext} from \"./context/texturePropertyContext\"\n\nimport AddMaterial from \"./containers/AddMaterial\"\nimport DashedLine from \"./components/DashedLine\"\nimport LabeledSwitch from \"./containers/LabeledSwitch\"\nimport Expand from \"./containers/Expand\"\n\nimport RangeInput from \"./components/RangeInput\"\nimport GrowingInput from \"./components/GrowingInput\"\nimport GrowingInputByPercentage from \"./components/GrowingInputByPercentage\"\n\n\nfunction App() {\n  const WorkSpaceRef = useRef(null)\n  const {globalState, dispatch} = useContext(TexturePorpertyContext)\n  const [firstChildInitialPos, setFirstChildInitialPos] = useState(0)\n  const rightPanel = useRef(null)\n\n  const advancedOptionSections= \"overflow-auto px-2\"\n\n  useEffect(() => {\n    dispatch({type: \"ADD_WORKSPACE_REF\", payload: {\n      ref: WorkSpaceRef\n    }})\n  }, [WorkSpaceRef])\n  useEffect( () => {\n    \n    setFirstChildInitialPos(rightPanel !== null && rightPanel.current.children[0].getBoundingClientRect().top)\n  }, [])\n\n  function handleScroll(e){\n    const firstChildCurrentPos = rightPanel.current.children[0].getBoundingClientRect()\n    let offset = 0\n    if(firstChildCurrentPos <= firstChildInitialPos + 56) {\n      rightPanel.current.scrollTop = 0\n    }else{\n      offset = firstChildCurrentPos.top - 74 + window.scrollY\n    }\n\n    \n    console.log(firstChildCurrentPos.top + window.scrollY )\n    dispatch({type: \"SET_SCROLL_OFFSET\", payload: {\n      offsetY: offset\n    }})\n  }\n\n  return (\n    <div  className=\"App font-inter overflow-hidden transition-none \">\n\n      <div id=\"MenuBar\" className=\"w-full h_56 bg-primary z-10 relative\" style={{ background: `url(${Navbar}) no-repeat center top/100% auto`}}></div>\n      <div id=\"Workspace\" className=\"flex\">\n\n        <div id=\"leftSidebarAnd3DSpace\" className=\"w-full h-screen\">\n          <div id=\"toolbar\" className=\"w-full h_40 bg-primaryLight\" style={{ background: `url(${Toolbar}) no-repeat center top/100% auto`}}></div>\n          <div className=\"w-full h-full flex\">\n              <div id=\"leftSideBar\" className=\"w_prop h-full bg-almostWhite\" style={{ background: `url(${leftSideBar}) no-repeat center top/100% auto`}}></div>\n              <div id=\"3DSpace\" ref={WorkSpaceRef} className=\" h-full bg-almostBlack p-3\" style={{\n                width: \"calc(100% - 248px)\", \n                height: \"calc(100% )\",\n                background: `url(${Background}) no-repeat center top/100% auto`\n                }}>\n\n\n                <TexturePopup />\n              </div>\n          </div>\n        </div>\n\n        <div id=\"right_panel\" className=\"bg-almostWhite \">\n\n              <div onScroll={handleScroll}  ref={rightPanel} id=\"sliders\" \n              className=\"w_prop h-full items-center flex flex-col overflow-y-scroll overflow-x-hidden hideScrollBar select-none dark:bg-almostBlack\" style={{height: \"calc(100vh - 70px)\"}}>\n\n             \n\n                <AddMaterial />\n\n                <MaterialList />\n\n                <DashedLine />\n\n                    {/* If no properties are passed down the default slider is shown */}\n                    <TextSlider  />\n\n                    {/* Prop name is only set if specified. By default it will say \"Property\", \n                    you would need to write propName=\"Something\" in order to name the slider \"Something\"\n\n                    ----------------------------\n\n                    a slider is only inactive if you specify, in this case active must equal to -- false --\n                    */}\n                    <TextSlider  propName=\"Roughness\" active={false} unit={\"\"}/>\n\n                    {/* \n                    All props\n\n                    propName => The name of the property e.g. Hue or Base Color or Metalness (if not set or the field is empty -> \"Property\")\n                    active => decides if a slider is active or not. if not must be set to false (if not set it is --true--)\n                    decimal => If the value should be decimal (0.001) --true-- or integer (1) --false-- / not set\n                    maximum => the default maximum of the slider, the values can never be less then this, but can exceed if set manually\n                    unit => \"%\" -> 50% ||   \"$\" -> 50$ || null -> 50 || if not set it will be % (e.g. 50%) by default\n\n                    */}\n\n                    <TextSlider  propName=\"Base\" active={true} decimal={true} maximum={100} unit={\"%\"}/>\n                    <TextSlider  propName=\"Metalness\" active={true} decimal={false} maximum={100} unit={\"%\"}/>\n                    <TextSlider  propName=\"Opacity\" active={true} decimal={false} maximum={100} unit={\"%\"}/>\n                    <TextSlider  propName=\"Emission\" active={true} decimal={false} maximum={1000} unit={\"%\"}/>\n                    <TextSlider  propName=\"Normal\" active={false} decimal={false} maximum={100} unit={\"%\"}/>\n\n                    <TextSlider  propName=\"Metalness\" active={true} decimal={false} maximum={100} unit={\"%\"}/>\n                   \n                  \n                    <LabeledSwitch label=\"Double Sided Material\"  padding={true}/>\n                    <DashedLine />\n\n                        <div className=\"flex w-full justify-between px-4 normal-font my-4\">\n                      <div>\n                        <p>Range (0-100)</p>\n                        <RangeInput />\n                      </div>\n                      <div>\n                       \n                       \n                      </div>\n                      <div>\n                        <p>Growing input</p>\n                        <GrowingInputByPercentage unit={\"%\"} />\n                      </div>\n                    </div>\n\n                    <DashedLine />\n\n                    <Expand label=\"Advanced Options\">\n                        <div className={advancedOptionSections} >\n\n                        <LabeledInput label=\"Anisotropy\" labelType=\"title\" type=\"rangeInput\"  hasButton={true} plus={true}   input={defaultInputs.single(\"%\")} />\n                        <LabeledInput  label=\"Rotation\" type=\"buttonless\"  input={defaultInputs.single(\"°\")}  />\n\n                        </div>\n\n                        <div className={advancedOptionSections}>\n\n                        <LabeledInput label=\"Clearcoat\" labelType=\"title\" hasButton={true} plus={true}   input={defaultInputs.single(\"%\")} />\n                        <LabeledInput  label=\"Roughness\" type=\"buttonless\"  input={defaultInputs.single(\"%\")}  />\n\n                        </div>\n\n                        <div className={advancedOptionSections}>\n\n                        <LabeledInput label=\"Subsurface\" labelType=\"title\" hasButton={true} plus={true}   input={defaultInputs.single(\"%\")} />\n                        <LabeledInput  label=\"Radius / Thickness\" type=\"buttonless\"  input={defaultInputs.single(\"mm\")}  />\n\n                        </div>  \n\n                        <div className={advancedOptionSections} style={{overflowY: \"hidden\", overflowX: \"hidden\"}}>\n\n                        <LabeledInput label=\"Refraction\" labelType=\"title\" hasButton={true} icon=\"dropdown\"   input={defaultInputs.single(\"%\")} />\n                        <LabeledInput  label=\"Absorbtion\" hasButton={true} plus={true} icon=\"solid\" input={defaultInputs.double(\"mm\")}  />\n\n                        </div> \n\n                        <div className={advancedOptionSections}>\n\n                        <LabeledInput label=\"Reflectivity\" labelType=\"title\" hasButton={true} plus={true}   input={defaultInputs.single(\"%\")} />\n\n                        </div> \n\n                        <div className={advancedOptionSections}>\n\n                        <LabeledInput label=\"Ambient Occlusion\" labelType=\"title\" hasButton={true} plus={true}   input={defaultInputs.single(\"%\")} />\n\n                        </div> \n\n                        <div className={advancedOptionSections}>\n\n                        <LabeledInput label=\"Lightmap\" labelType=\"title\" hasButton={true} plus={true}   input={defaultInputs.single(\"%\")} />\n\n                        </div> \n                    </Expand>\n\n                    <Expand label=\"Texture Transformations\" padding={true}>\n                        <div className={advancedOptionSections}>\n\n                        <LabeledInput label=\"Tiling\" hasButton={true} icon=\"link\"  input={defaultInputs.double(null, true)} />\n\n                        </div> \n\n                        <div className={advancedOptionSections}>\n\n                        <LabeledInput label=\"Offset\"type=\"buttonless\"   input={defaultInputs.double(null, true)} />\n\n                        </div> \n\n                        <div className={advancedOptionSections}>\n\n                        <LabeledInput label=\"Rotation\" type=\"buttonless\"   input={defaultInputs.single(\"°\")} />\n\n                        </div> \n                      \n\n                    </Expand>\n\n                   \n                   \n\n                    </div>\n        </div>\n\n      </div>\n     \n    </div>\n  );\n}\n\nexport default App;\n","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\TextureButton.jsx",["128"],"import React from \"react\"\r\nimport  Plus from \"../img/Symbols/Sprites/Signs_Plus_1.svg\"\r\n\r\n\r\n\r\nfunction TextureButton(props) {\r\n    const {\r\n        setOpenPopup,\r\n        openPopup,\r\n        type,\r\n        className,\r\n    \r\n    } = props\r\n\r\n    function handleClick(){\r\n        setOpenPopup(!openPopup)\r\n    }\r\n    return(\r\n        <>\r\n        <button onClick={handleClick}  className={`${className !== undefined ? className : \"ml-2\"} ${type == \"circle\" ? \"rounded-xl overflow-hidden bg-lightGrey\" \r\n        : type=== \"transparent\" ? \"\" : \"bg-lightGrey\"} \r\n        icon  focus:outline-none  focus:ring-1 focus:ring-primary  focus:almostBlack rounded-sm flex justify-center items-center `}>\r\n            <img src={`${props.img || Plus}`}  alt={`${props.alt || \"add texture\"}`}/>\r\n        </button>\r\n          \r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TextureButton",["129","130"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\MaterialList.jsx",["131","132","133","134"],"import React, { useEffect, useState } from \"react\"\r\n\r\nimport Material from \"../components/Material\"\r\n\r\n\r\nfunction MaterialList(){\r\n    const [legacyCodeLoader, setLegacyCodeLoader] = useState(\"\")\r\n\r\n    const iframe = `<iframe src=\"https://vecarydev.github.io/MaterialList/\" width=\"248\" height=\"225\"> </iframe>`\r\n   \r\n    return(\r\n        <div id=\"matList\" className=\"material_list\" dangerouslySetInnerHTML={{__html: iframe}}>\r\n            \r\n       \r\n        </div>\r\n        // <div id=\"materialList\" className=\"flex flex-col justify-start w-full px-2\">\r\n\r\n        //     <Material />\r\n        //     <Material />\r\n        //     <Material />\r\n        //     <Material />\r\n\r\n        // </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MaterialList",["135","136"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\Material.jsx",["137","138","139","140"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\ColoredSlider.jsx",["141","142","143","144","145","146","147"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\popUpView.jsx",[],"C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\GrowingInput.jsx",["148","149","150"],"\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\n\r\nimport {map_float_range} from \"../TestData/functions\"\r\n\r\nimport ArrowGrowUp from \"../img/Symbols/Sprites/ArrowGrowUp.svg\"\r\nimport ArrowGrowDown from \"../img/Symbols/Sprites/ArrowGrowDown.svg\"\r\nimport ArrowGrow from \"../img/Symbols/Sprites/ArrowUpDown.svg\"\r\n\r\n\r\nfunction GrowingInput(props) {\r\n    const {\r\n        iterable,\r\n        unit,\r\n        color,\r\n        value\r\n    } = props\r\n    \r\n    const [dynamicValue, setDynamicValue] = useState(false)\r\n    const [multiplyer, setMultiplyer] = useState(0)\r\n    const [update, setUpdate] = useState(0)\r\n    const [hover, setHover] = useState(false)\r\n    const [growIcon, setGrowIcon] = useState(ArrowGrow)\r\n\r\n    const inputRef = useRef(null)\r\n\r\n\r\n\r\n    let limit = 1\r\n\r\n    let counter = 0\r\n\r\n    let dragOver = true\r\n    let userLocation = 0\r\n\r\n    let num = 0\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(multiplyer > 0) {\r\n            setGrowIcon(ArrowGrowUp)\r\n        }else{\r\n            setGrowIcon(ArrowGrowDown)\r\n        }\r\n\r\n        console.log(dynamicValue, multiplyer)\r\n        if(dynamicValue === false){\r\n            setDynamicValue(0 + multiplyer)\r\n        }else{\r\n            setDynamicValue(dynamicValue + multiplyer)\r\n        }\r\n        \r\n    }, [multiplyer, update])\r\n\r\n    const handleInputChange = (e) => {\r\n       \r\n        let newInput = e.target.value.split(`${unit}`).join(\"\")\r\n       \r\n        setDynamicValue(newInput )\r\n       \r\n    }\r\n    const handleSelect = (e) => {\r\n        e.target.select()\r\n\r\n\r\n    }\r\n\r\n \r\n    const handleDrag = (location, dynamicData) => {\r\n       if(inputRef !== null) {\r\n           const difference = inputRef.current.getBoundingClientRect().top + 60 + window.scrollY - location\r\n           let changingFactor = () => {\r\n               const growthRate = parseInt(map_float_range(difference, -100, 100, -limit, limit))\r\n               if(Math.abs(growthRate) < 2){\r\n                   return 0\r\n               }else{\r\n                   return growthRate\r\n               }\r\n           }\r\n           //console.log(dynamicValue)\r\n          \r\n           const adjustChange = () => {\r\n              // console.log(dynamicValue +  Math.pow(2, Math.log10(difference )- 1))\r\n             //  console.log(Math.pow(2, Math.log10(difference)), Math.log10(difference - 1), difference)\r\n            //    if(difference > 0) {\r\n                   \r\n            //         return Math.ceil( Math.pow(2, changingFactor() ))\r\n            //    }\r\n            //    else if(difference < 0 ){\r\n            //     return  Math.floor( Math.pow(2, changingFactor() * -1)) * -1\r\n            //    }\r\n            //    else{\r\n            //        return 0;\r\n                    \r\n            //    }\r\n\r\n            counter++\r\n           \r\n            if(changingFactor() > 0){\r\n             \r\n                if(changingFactor() > 5){\r\n                    return Math.pow(2, 5)\r\n                }else{\r\n                    return Math.pow(2, changingFactor())\r\n                }\r\n\r\n            }else if(changingFactor < 0){\r\n                if(changingFactor() < -5){\r\n                    return Math.pow(2, 5) * -1\r\n                }else{\r\n                    return Math.pow(2, Math.abs(changingFactor())) * -1\r\n                }\r\n\r\n            }\r\n            \r\n            \r\n            else{\r\n                return 0\r\n               \r\n            }\r\n\r\n            \r\n           }\r\n           setTimeout(() => {\r\n              \r\n            //console.log(dynamicValue, adjustChange(),  parseInt(dynamicValue + adjustChange() ), counter, num);\r\n            //num += parseInt( adjustChange() )\r\n            setMultiplyer(adjustChange())\r\n           }, 50)\r\n          \r\n          \r\n\r\n       }\r\n       \r\n    }\r\n    const handleDragEnd = (e) => {\r\n       e.preventDefault();\r\n    }\r\n    \r\n    let addSelfDestructingEventListener = (element, eventType, callback) => {\r\n        let handler = (e) => {\r\n            callback(e);\r\n            element.removeEventListener(eventType, handler);\r\n        };\r\n        element.addEventListener(eventType, handler);\r\n    };\r\n\r\n    function tryit() {\r\n      //  console.log(\"UP\")\r\n        dragOver = true\r\n        \r\n       // counter = 0\r\n       \r\n    }\r\n\r\n    function logUserLocation(e) {\r\n        console.log(e.clientY)\r\n     \r\n       if(e.clientY !== undefined){\r\n             userLocation = e.clientY\r\n       }\r\n       \r\n    }\r\n\r\n    function exprimental(e) {\r\n        \r\n        dragOver = false\r\n        function infinity() {\r\n           \r\n            if(!dragOver){\r\n                setTimeout(() => {\r\n                    addSelfDestructingEventListener(window, \"mousemove\", logUserLocation) \r\n                   // setDynamicValue(num += multiplyer)\r\n                   \r\n                    handleDrag(userLocation)\r\n                    \r\n                    console.log(\"down\")\r\n                    if(counter % 2 === 0){\r\n                        setUpdate(update+ 1)\r\n                       }else{\r\n                        setUpdate(false)\r\n                       }\r\n                      \r\n                    infinity()\r\n                }, 100)\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            infinity()\r\n        }, 500)\r\n        \r\n        addSelfDestructingEventListener(window, \"mouseup\", tryit) \r\n    }\r\n\r\n    function experimentalEnd() {\r\n        console.log(\"up\")\r\n    }\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n      // console.log(dynamicValue)\r\n    }, [dynamicValue])\r\n\r\n    return (\r\n        <div \r\n\r\n        onMouseOver={() => { setHover(true); setGrowIcon(ArrowGrow) } }\r\n        onMouseLeave={() => { setHover(false) } } \r\n        \r\n        className={`${color ? \"w_32 ml-1\" : \"w_56 ml-1\"} h_24  relative flex items-center `}>\r\n\r\n\r\n            <input onClick={handleSelect}\r\n             onDrag={handleDragEnd}\r\n             onMouseDown={exprimental}\r\n             onMouseUp={experimentalEnd}\r\n            onDrop={handleDragEnd}\r\n            \r\n            ref={inputRef}\r\n            value={dynamicValue} \r\n            onChange={handleInputChange}\r\n            defaultValue={`${color ? value : `0${unit}`}`} \r\n            className={`bg-lightGrey w-full h-full rounded ${iterable ? \"pl-4\" : \"pl-1\"}  normal-font` } />\r\n            \r\n            {hover && \r\n            <div className=\"absolute right-0 h_24 flex items-center pointer-events-none \"> \r\n\r\n                <img onDrag={handleDragEnd} className=\"\" src={growIcon} />\r\n\r\n            </div>\r\n\r\n            }\r\n            \r\n            \r\n            {iterable &&  <p className=\"normal-font absolute pl-1 text-midGrey\">{iterable}</p>   }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GrowingInput","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\RangeInput.jsx",["151","152","153","154","155","156","157","158","159"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\TextSlider.jsx",["160","161","162","163","164","165","166","167","168","169","170"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\LabeledInput.jsx",["171","172","173","174","175","176","177","178","179","180","181","182"],"import React, { useEffect, useState, useRef, useContext, useLayoutEffect } from \"react\"\r\n\r\nimport {TexturePorpertyContext} from \"../context/texturePropertyContext\"\r\n\r\nimport DownArrow from \"../img/Symbols/Sprites/ArrowDown.svg\"\r\n\r\nimport {generateInputs, payloadGenerator} from \"../TestData/generators\"\r\n\r\nimport colorPicker from \"../img/Symbols/Sprites/PipetteColor.svg\"\r\n\r\nimport Plus from \"../img/Symbols/Sprites/Plus.svg\"\r\n\r\nimport ColorPlaceholder from \"../img/colorPlaceholder.png\"\r\n\r\nimport Link from \"../img/Symbols/Sprites/Link.svg\"\r\nimport Unlink from \"../img/Symbols/Sprites/Unlink.svg\"\r\n\r\nimport TextureButton from \"../components/TextureButton\"\r\n\r\nimport {AnisotropyDefaults} from \"../TestData/DefaultData\"\r\n\r\n\r\nimport {TextureTypes, defaultImages} from \"../TestData/DefaultData\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Dropdown from \"../components/dropdown\"\r\n\r\nfunction LabeledInput(props) {\r\n    const {\r\n        id,\r\n        label,\r\n        labelType,\r\n        input,\r\n        type,\r\n        icon,\r\n        path,\r\n        plus,\r\n        hasButton,\r\n        buttonClick\r\n    } = props\r\n    const mainProperty = props.mainProperty !== undefined ? props.mainProperty : true\r\n    const [inputs, setInputs] = useState([])\r\n    const {globalState, dispatch} = useContext(TexturePorpertyContext)\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [localLabel, setLocalLabel] = useState(\"\")\r\n\r\n    const [buttonIcon, setButtonIcon] = useState(Plus)\r\n\r\n    const [toggleDorpdown, setToggleDropdown] = useState(false)\r\n\r\n    const payload = payloadGenerator(label)\r\n   \r\n   \r\n    const newId =  id ? id : uuidv4()\r\n\r\n    useEffect(()=>{\r\n        console.log(mainProperty)\r\n        type == \"colorPicker\" ? setLocalLabel(input.iterable[0].label) : setLocalLabel(label)\r\n       \r\n        switch (icon) {\r\n            \r\n            case \"picker\":\r\n                setButtonIcon(colorPicker)\r\n                break;\r\n            case \"dropdown\":\r\n                setButtonIcon(DownArrow)\r\n                break;\r\n            case \"solid\": \r\n                setButtonIcon(ColorPlaceholder)\r\n                break;\r\n            case \"link\":\r\n                setButtonIcon(Link)\r\n                break;\r\n            default:\r\n                setButtonIcon(Plus)\r\n        }\r\n\r\n        dispatch({type: \"ADD_ONE_PROP\", payload:{\r\n            id: newId,\r\n            name: label,\r\n            textureTypes: TextureTypes(),\r\n            images: defaultImages\r\n        }}) \r\n\r\n        setInputs(generateInputs(input, type || null))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const globalStateCopy = globalState\r\n\r\n       if(path){\r\n           const loadEditedProperties = globalState.MaterialPorperties[path.activeProperty].textureTypes[path.activeTexture].tabTypes[path.activeTab]\r\n           const editedPropertyProgress = loadEditedProperties.properties.filter(x => x.id === id)[0]\r\n           console.log(editedPropertyProgress.progress, editedPropertyProgress.id)\r\n           //setProgress(editedPropertyProgress.progress)\r\n       }\r\n        \r\n        if(globalStateCopy.MaterialPorperties.length > 0 && id === undefined && openPopup && icon === undefined){\r\n         \r\n            dispatch({type: \"ADD_ACTIVE_MATERIAL_POPUP\", payload: {\r\n                id: globalStateCopy.MaterialPorperties.filter(x => x.name == label)[0].id\r\n            }})\r\n        }\r\n        else if(openPopup && icon === \"dropdown\"){\r\n            setToggleDropdown(!toggleDorpdown)\r\n        }else if( icon === \"link\"){\r\n            if(openPopup){\r\n                setButtonIcon(Unlink)\r\n            }else{\r\n                setButtonIcon(Link)\r\n            }\r\n        }\r\n            \r\n        \r\n    }, [openPopup])\r\n\r\n\r\n\r\n    return(\r\n        <div className={`w-full h_24 flex ${ type=== \"colorPicker\" ? \"mt-5\" : \"my-2\"} ${mainProperty ? \"my-2\" : \"my-4\"} text-almostBlack  `}>\r\n            <div className={` w-full flex items-center justify-between relative`}>\r\n               \r\n               {type !== \"colorPicker\" ?\r\n               \r\n               \r\n               <p className={`${labelType === \"title\" ? \"font-semibold\" : \"font-normal\"} normal-font`}>{localLabel}</p>\r\n               \r\n            :\r\n            <div   \r\n            className={` bg-lightGrey h-full w_48 flex justify-center items-center normal-font`}>\r\n            { localLabel} \r\n            <img className=\"\" src={DownArrow} />\r\n            </div>\r\n         \r\n            }\r\n                    \r\n\r\n        <div className={`flex ${type === \"buttonless\" && \"pr-8\"}`}>\r\n                <div className=\"flex\">\r\n\r\n                    {inputs && inputs.map((inp) => {\r\n                        return inp\r\n                    })}\r\n\r\n                </div>\r\n                {hasButton && <TextureButton \r\n                type={icon === undefined || icon !== \"dropdown\" && \"transparent\"}\r\n                openPopup={openPopup} \r\n                className={`${!mainProperty ? \"ml-1\" : \"ml-2\" }`} \r\n                img={buttonIcon} \r\n                alt=\"\" \r\n                setOpenPopup={setOpenPopup}/>}\r\n                {icon === \"dropdown\" && <Dropdown \r\n                setToggleDropdown={setToggleDropdown} \r\n                list={AnisotropyDefaults} \r\n                defaultState={toggleDorpdown} \r\n                style={{marginTop: \"-4px\"}}\r\n                className={`absolute z-10 w-28 bg-almostBlack text-almostWhite ${!toggleDorpdown && \"hidden\"}`}/>}\r\n        </div>\r\n\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default LabeledInput","C:\\Work\\Vectary\\backup\\material_ui\\src\\containers\\TexturePopup.jsx",["183","184","185","186","187","188"],"import React, { useContext, useEffect, useRef, useState,useLayoutEffect } from \"react\"\r\nimport Draggable from \"react-draggable\"\r\n\r\nimport {TexturePorpertyContext} from \"../context/texturePropertyContext\"\r\n \r\nimport {generateProperties} from \"../TestData/generators\"\r\n\r\nimport Dropdown from \"../components/dropdown\"\r\nimport PopUpView from \"../components/popUpView\"\r\nimport Tab from \"../components/Tab\"\r\n\r\nfunction useOutsideAlerter(ref, dispatch, globalState) {\r\n    useEffect(() => {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                if(globalState.MetaData.WorkspaceRef && event.target === globalState.MetaData.WorkspaceRef.current){\r\n                    \r\n                    dispatch({type: \"CLOSE_POPUP\"})\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref, globalState]);\r\n}\r\n\r\nArray.prototype.move = function (from, to) {\r\n    this.splice(to, 0, this.splice(from, 1)[0]);\r\n  };\r\n\r\nfunction TexturePopup(props) {\r\n    const {globalState, dispatch}= useContext(TexturePorpertyContext)\r\n    \r\n    const [open, setOpen] = useState(true)\r\n    const [hover, setHover] = useState(false)\r\n    const popUpWindow = useRef(null)\r\n    \r\n    const [activeProperty, setActiveProperty] = useState(0) // The index of the active property e.g. Metalness\r\n    const [activeTexture, setActiveTexture] = useState(0) //The index of the active TextureType (Solid / Gradient / Image)\r\n    const [activeTab, setActiveTab] = useState(0) //The index of the active submenu currently open (e.g. Adjust / Transform)\r\n    const [activeType, setActiveType] = useState(0) // \r\n\r\n\r\n    const [properties, setProperties] = useState([])\r\n\r\n    useOutsideAlerter(popUpWindow, dispatch, globalState)\r\n\r\n    useEffect(() => {\r\n     \r\n\r\n           setOpen(globalState.MetaData.activeTexturePopup !== \"\")\r\n           setActiveTab(0)\r\n           setActiveType(0)\r\n           setActiveTexture(0)\r\n           if(globalState.MetaData.activeTexturePopup !== \"\") {\r\n               const globalStateCopy = globalState\r\n            let currentSelection = globalStateCopy.MaterialPorperties.filter(x => x.id === globalState.MetaData.activeTexturePopup)[0]\r\n            setActiveProperty(globalState.MaterialPorperties.indexOf(currentSelection))\r\n\r\n            \r\n           }\r\n        \r\n    }, [globalState.MetaData.activeTexturePopup])\r\n\r\n   useEffect(() => {\r\n   \r\n    if(activeProperty !== undefined && globalState.MaterialPorperties[activeProperty] !== undefined) {\r\n        const path = {\r\n            activeProperty: activeProperty,\r\n            activeTexture: activeTexture,\r\n            activeTab: activeTab,\r\n        }\r\n            const currentlySelectedProps = globalState.MaterialPorperties[activeProperty].textureTypes[activeTexture].tabTypes[activeTab]\r\n            setProperties(currentlySelectedProps)\r\n            const newProperties = generateProperties(currentlySelectedProps, path)\r\n            setProperties(newProperties)\r\n\r\n\r\n            \r\n    }\r\n    const test = {\r\n        activeProperty: activeProperty,\r\n        activeTexture: activeTexture,\r\n        activeTab: activeTab,\r\n        activeType: activeType\r\n    }\r\n\r\n    console.table(test)\r\n\r\n    if( globalState.MaterialPorperties[activeProperty] !== undefined) {\r\n        console.log(globalState.MaterialPorperties[activeProperty].textureTypes[activeTexture])\r\n    }\r\n\r\n   }, [activeProperty,activeTexture, activeTab, activeType, open])\r\n\r\n    function handleHoverStart() {\r\n       \r\n        setHover(true)\r\n    }\r\n\r\n    function handleHoverEnd(){\r\n        \r\n        setHover(false)\r\n    }\r\n\r\n\r\n  \r\n    return(\r\n        <div className=\"flex justify-end pt-60 select-none \"\r\n   >\r\n       {globalState.MaterialPorperties[activeType] ? \r\n         <div ref={popUpWindow} \r\n         className={`${open ? \"\" : \"hidden\"} \r\n         w_props-row  bg-white absolute rounded-sm overflow-hidden `} \r\n         style={{minHeight: \"350px\"}}>\r\n\r\n               <PopUpView  \r\n                       globalState={globalState}\r\n                       activeType={activeType}\r\n                       handleHoverStart={handleHoverStart}\r\n                       handleHoverEnd={handleHoverEnd}\r\n                       hover={hover}\r\n                       activeTexture={activeTexture}\r\n                       setActiveTexture={setActiveType}\r\n                       activeProperty={activeProperty}\r\n                       type={globalState.MaterialPorperties[activeProperty].textureTypes[activeType]}\r\n               />  \r\n           \r\n               \r\n             <div id=\"popUp_Properties transition-all duration-100 \" className=\"p-4 \">\r\n                \r\n                 \r\n                <Dropdown list={globalState.MaterialPorperties[activeProperty].textureTypes} type=\"solid\" dropdownSelection={activeTexture} setDropdownSelection={setActiveTexture} />\r\n                \r\n\r\n               {globalState.MaterialPorperties[activeProperty].textureTypes[activeTexture].tabTypes.length > 1 && \r\n                <Tab tabOptions={ globalState.MaterialPorperties[activeProperty].textureTypes[activeTexture].tabTypes} active={activeTab} setActive={setActiveTab}/>\r\n                } \r\n                \r\n\r\n               {properties && properties.map((prop) => {\r\n                   return prop\r\n               })}\r\n\r\n             </div>\r\n         </div>\r\n         : <div></div> }\r\n   </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TexturePopup","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\Switch.jsx",["189","190","191"],"import React, { useEffect, useRef, useState } from \"react\"\r\nimport { generateInputs } from \"../TestData/generators\"\r\n\r\n\r\n\r\nfunction Switch(props){\r\n    const {\r\n        id,\r\n        axis,\r\n        unit\r\n        } = props\r\n        const checkboxRef = useRef(null)\r\n        const [state, setState] = useState(false)\r\n\r\n        console.log(id, axis)\r\n        function handleChange(e){\r\n            console.log(checkboxRef.current.checked)\r\n            \r\n            setState(!state)\r\n            checkboxRef.current.checked = state\r\n        }\r\n\r\n    return(\r\n        <div id={id} onClick={handleChange} className={` w_56 h-full flex justify-between items-center ml-2`}>\r\n            <p className=\"font-normal normal-font text-midGrey pl-1\">{axis}</p>\r\n            <div  className={` ${state ? \"bg-primary justify-end\" :  \"bg-midGrey\"}  rounded-xl w_24 h-3 flex `}>\r\n\r\n                <div id=\"knot\" className=\"w-2 h-2 bg-almostWhite m-0.5 rounded-xl\">\r\n                        <input ref={checkboxRef} className=\"opacity-0 w-0 h-0\" type=\"checkbox\" />\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Switch","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\GrowingInputByPercentage.jsx",["192","193","194","195","196","197"],"\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\n\r\nimport {map_float_range} from \"../TestData/functions\"\r\n\r\nimport ArrowGrowUp from \"../img/Symbols/Sprites/ArrowGrowUp.svg\"\r\nimport ArrowGrowDown from \"../img/Symbols/Sprites/ArrowGrowDown.svg\"\r\nimport ArrowGrow from \"../img/Symbols/Sprites/ArrowUpDown.svg\"\r\nimport { parse } from \"postcss\"\r\n\r\n\r\nfunction GrowingInputByPercentage(props) {\r\n    const {\r\n        iterable,\r\n        unit,\r\n        color,\r\n        value\r\n    } = props\r\n    \r\n    const [dynamicValue, setDynamicValue] = useState(false)\r\n    const [multiplyer, setMultiplyer] = useState(0)\r\n    const [update, setUpdate] = useState(0)\r\n    const [hover, setHover] = useState(false)\r\n    const [growIcon, setGrowIcon] = useState(ArrowGrow)\r\n    const [editableText, setEditableText] = useState(false)\r\n    const [indicator, setIndicator] = useState(false)\r\n    \r\n    const inputRef = useRef(null)\r\n\r\n\r\n\r\n    let limit = 0.1\r\n\r\n    let counter = 0\r\n\r\n    let dragOver = true\r\n    let userLocation = 0\r\n\r\n    let num = 0\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n\r\n        if(multiplyer > 0) {\r\n            setGrowIcon(ArrowGrowUp)\r\n        }else{\r\n            setGrowIcon(ArrowGrowDown)\r\n        }\r\n\r\n      \r\n\r\n\r\n       \r\n        if(dynamicValue === false){\r\n            setDynamicValue(0 + unit )\r\n        }else{\r\n            const processedDynamicValue = parseInt(dynamicValue.split(`${unit}`).join(\"\"))\r\n            \r\n            if(processedDynamicValue === 0) {\r\n                setDynamicValue(Math.ceil(2 * multiplyer) + unit)\r\n            }else{\r\n               if(multiplyer > 0.005){\r\n                    setDynamicValue(Math.ceil(processedDynamicValue + (processedDynamicValue * multiplyer)) + unit)\r\n               }else if (multiplyer < -0.005) {\r\n                     setDynamicValue(Math.floor(processedDynamicValue + (processedDynamicValue * multiplyer)) + unit)\r\n                \r\n               }else{\r\n                    setDynamicValue(processedDynamicValue + unit)    \r\n               }\r\n            }\r\n            \r\n        }\r\n        \r\n    }, [multiplyer, update])\r\n\r\n    const handleInputChange = (e) => {\r\n       \r\n        let newInput = e.target.value.split(`${unit}`).join(\"\")\r\n       \r\n        setDynamicValue(newInput )\r\n       \r\n    }\r\n    const handleSelect = (e) => {\r\n      \r\n\r\n\r\n    }\r\n\r\n \r\n    const handleDrag = (location, dynamicData) => {\r\n       if(inputRef !== null) {\r\n           const difference = inputRef.current.getBoundingClientRect().top + 12 + window.scrollY - location\r\n           let changingFactor = map_float_range(difference, -100, 100, -limit, limit)\r\n           //console.log(dynamicValue)\r\n          \r\n           const adjustChange = () => {\r\n              // console.log(dynamicValue +  Math.pow(2, Math.log10(difference )- 1))\r\n             //  console.log(Math.pow(2, Math.log10(difference)), Math.log10(difference - 1), difference)\r\n            //    if(difference > 0) {\r\n                   \r\n            //         return Math.ceil( Math.pow(2, changingFactor ))\r\n            //    }\r\n            //    else if(difference < 0 ){\r\n            //     return  Math.floor( Math.pow(2, changingFactor * -1)) * -1\r\n            //    }\r\n            //    else{\r\n            //        return 0;\r\n                    \r\n            //    }\r\n\r\n            counter++\r\n           \r\n           \r\n            if(changingFactor > 0){\r\n\r\n                if(changingFactor > limit){\r\n                    return limit\r\n                }else{\r\n                    return changingFactor\r\n                }\r\n\r\n            }else{\r\n                \r\n                if(changingFactor < -limit){\r\n                    return limit * -1\r\n                }else{\r\n                   return changingFactor\r\n                }\r\n\r\n            }\r\n\r\n            \r\n           }\r\n           setTimeout(() => {\r\n              \r\n            //console.log(dynamicValue, adjustChange(),  parseInt(dynamicValue + adjustChange() ), counter, num);\r\n            //num += parseInt( adjustChange() )\r\n            setMultiplyer(adjustChange())\r\n           }, 50)\r\n          \r\n          \r\n\r\n       }\r\n       \r\n    }\r\n    function pauseEvent(e){\r\n        if(e.stopPropagation) e.stopPropagation();\r\n        if(e.preventDefault) e.preventDefault();\r\n        e.cancelBubble=true;\r\n        e.returnValue=false;\r\n        return false;\r\n    }\r\n    \r\n    let addSelfDestructingEventListener = (element, eventType, callback) => {\r\n        let handler = (e) => {\r\n            callback(e);\r\n            element.removeEventListener(eventType, handler);\r\n        };\r\n        element.addEventListener(eventType, handler);\r\n    };\r\n\r\n    function tryit() {\r\n      //  console.log(\"UP\")\r\n        dragOver = true\r\n        const selection = inputRef.current.value.substring(inputRef.current.selectionStart, inputRef.current.selectionEnd);\r\n        \r\n        if(selection === \"\") {\r\n            inputRef.current.select()\r\n            setEditableText(true)\r\n        }else{\r\n            setEditableText(false)\r\n        }\r\n        console.log(selection)\r\n      \r\n       // counter = 0\r\n       \r\n    }\r\n\r\n    function logUserLocation(e) {\r\n        console.log(e.clientY)\r\n     \r\n       if(e.clientY !== undefined){\r\n             userLocation = e.clientY\r\n       }\r\n       \r\n    }\r\n\r\n    function exprimental(e) {\r\n       \r\n        \r\n        dragOver = false\r\n\r\n        const selection = inputRef.current.value.substring(inputRef.current.selectionStart, inputRef.current.selectionEnd);\r\n        \r\n        if(selection === \"\") {\r\n      \r\n        function infinity() {\r\n           \r\n            if(!dragOver ){\r\n                setTimeout(() => {\r\n                    addSelfDestructingEventListener(window, \"mousemove\", logUserLocation) \r\n                   // setDynamicValue(num += multiplyer)\r\n                  // e.target.select()\r\n                    handleDrag(userLocation)\r\n                    \r\n                   // console.log(\"down\")\r\n                    if(counter % 2 === 0){\r\n                        setUpdate(update+ 1)\r\n                       }else{\r\n                        setUpdate(false)\r\n                       }\r\n                      \r\n                    infinity()\r\n                }, 100)\r\n            }\r\n        }\r\n        setTimeout(() => {\r\n            infinity()\r\n            setEditableText(false)\r\n        }, 500)\r\n    }\r\n        \r\n        addSelfDestructingEventListener(window, \"mouseup\", tryit) \r\n    }\r\n\r\n    function experimentalEnd() {\r\n        console.log(\"up\")\r\n    }\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n      // console.log(dynamicValue)\r\n    }, [dynamicValue])\r\n\r\n    return (\r\n        <div \r\n\r\n        onMouseOver={() => { setHover(true); setGrowIcon(ArrowGrow) } }\r\n        onMouseLeave={() => { setHover(false) } } \r\n        \r\n        className={`${color ? \"w_32 ml-1\" : \"w_56 ml-1\"} h_24  relative flex items-center `}>\r\n\r\n\r\n            <input onClick={handleSelect}\r\n             onDrag={pauseEvent}\r\n             onMouseDown={exprimental}\r\n             onMouseUp={experimentalEnd}\r\n            onDrop={pauseEvent}\r\n            onFocus={() => {setIndicator(true)}}\r\n            onBlur={() => {setIndicator(false)}}\r\n            ref={inputRef}\r\n            value={dynamicValue} \r\n            onChange={handleInputChange}\r\n            defaultValue={`${color ? value : `0${unit}`}`} \r\n            className={`bg-lightGrey w-full h-full rounded ${iterable ? \"pl-4\" : \"pl-1\"}  normal-font` } />\r\n            \r\n            { hover && \r\n            <div className=\"absolute right-0 h_24 flex items-center pointer-events-none \"> \r\n\r\n                <img onDrag={pauseEvent} className=\"\" src={growIcon} />\r\n\r\n            </div>\r\n\r\n            }\r\n\r\n            {(!hover && indicator) &&\r\n              <div className=\"absolute right-0 h_24 flex items-center pointer-events-none \"> \r\n\r\n              <img onDrag={pauseEvent} className=\"\" src={growIcon} />\r\n\r\n          </div>}\r\n            \r\n            \r\n            {iterable &&  <p className=\"normal-font absolute pl-1 text-midGrey\">{iterable}</p>   }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GrowingInputByPercentage","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\DashedLine.jsx",[],"C:\\Work\\Vectary\\backup\\material_ui\\src\\reducers\\MaterialPropertyReducer.jsx",["198","199"],"C:\\Work\\Vectary\\backup\\material_ui\\src\\TestData\\generators.jsx",["200","201","202","203","204","205"],"import React from \"react\"\r\nimport TextSlider  from \"../containers/TextSlider\"\r\nimport Input from \"../components/Input\"\r\nimport RangeInput from \"../components/RangeInput\"\r\nimport LabeledSwitch from \"../containers/LabeledSwitch\"\r\nimport LabeledInput from \"../containers/LabeledInput\"\r\n\r\nimport {TextureTypes} from \"./DefaultData\"\r\nimport _uniqueId from 'lodash/uniqueId';\r\nimport Switch from \"../components/Switch\"\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const defaultInputs = {\r\n    single: (unit = null) => {\r\n       return {\r\n            iterable: [0],\r\n            unit: unit \r\n        }\r\n    },\r\n    double: (unit = null, iterable) => {\r\n        return {\r\n            iterable: iterable ? [\"X\", \"Y\"] : [0, 0],\r\n            unit: unit \r\n        }\r\n    },\r\n    triple: (unit = null, iterable) => {\r\n        return {\r\n            iterable: iterable ? [\"X\", \"Y\", \"Z\"] : [0, 0, 0],\r\n            unit: unit \r\n        }\r\n    },\r\n    color: () => {\r\n        return {\r\n            iterable: [\r\n                {\r\n                    label: \"RGB\",\r\n                    default: [255,255,255]\r\n                },\r\n                {\r\n                    label: \"HSB\",\r\n                    default: [360, 100, 100]\r\n                },\r\n                {\r\n                    label: \"HEX\",\r\n                    default: [\"#fffff\"]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\nexport  const newSwitch = (swt) => {\r\n                  \r\n    switch (swt.type){\r\n        case \"single\": \r\n            return defaultInputs.single()\r\n\r\n        case \"double\":\r\n            return defaultInputs.double(null, true)\r\n  \r\n    }\r\n}\r\n\r\nexport const generateProperties = (listOfProperties, path) => {\r\n    let propertyArray = []\r\n    console.log(listOfProperties, path)\r\n    listOfProperties.properties.map((property, index) =>{\r\n        \r\n        switch(property.type) {\r\n            case \"slider\":\r\n                propertyArray.push( <TextSlider \r\n                    id={property.id}\r\n                    key={property.id} \r\n                    path={path}\r\n                    propName={property.label} \r\n                    active={true} \r\n                    decimal={false} \r\n                    colorSlider={property.colorSlider || false}\r\n                    maximum={property.max} \r\n                    minimum={property.min}\r\n                    labelType={\"normal\"}\r\n                    unit={null} \r\n                    \r\n                    hasButton={false}/>)\r\n                    break;\r\n            case \"switch\":\r\n               \r\n              console.log(newSwitch(property.input), property.input , \"GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\")\r\n\r\n                    propertyArray.push(\r\n                        <LabeledSwitch\r\n                            key={property.id}\r\n                            label={property.label}\r\n                            labelType={\"normal\"}\r\n                            input={newSwitch(property.input)}\r\n                        />\r\n                    )\r\n\r\n                    break;\r\n            case \"number\":\r\n                const newNumberInput = (input) => {\r\n                    switch (input.type){\r\n                        case \"single\":\r\n                            return defaultInputs.single(input.unit, input.iterable)\r\n                       \r\n                        case \"double\":\r\n                            return defaultInputs.double(input.unit, input.iterable)\r\n                        \r\n                        case \"triple\": \r\n                            return defaultInputs.triple(input.unit, input.iterable)\r\n\r\n                        case \"colorPicker\":\r\n                            return defaultInputs.color()\r\n                       \r\n                    }\r\n                }\r\n               \r\n                console.log(\"HERE\")\r\n                propertyArray.push(\r\n                \r\n                <LabeledInput \r\n                key={property.id}\r\n                id={_uniqueId(\"LabeledInput-\")}  \r\n                label={property.label}  \r\n                labelType={`${property.labelType}`}    \r\n                hasButton={property.hasButton}  \r\n                type={property.input.type}\r\n                mainProperty={false}\r\n                input={newNumberInput(property.input)}   />\r\n                \r\n                )\r\n\r\n                    break;\r\n            \r\n        }\r\n    })\r\n    return propertyArray\r\n}\r\n\r\n\r\nexport const generateInputs = (inputs, type = null) => {\r\n    \r\n    const inputIterable = inputs.iterable || [0]\r\n\r\n    const inputArray = []   \r\n\r\n    console.log(inputIterable)\r\n    inputIterable.map((elem, index) => {\r\n        \r\n        const newiterable = (inputs.iterable && inputs.iterable[0] != 0) ? inputs.iterable[index] : \"\"\r\n        const newUnit = (inputs.iterable && inputs.unit != null) ? inputs.unit : \"\"\r\n\r\n        const newId = uuidv4()\r\n\r\n        switch(type) {\r\n            case \"switch\": \r\n            inputArray.push(<Switch key={newId} id={newId} axis={newiterable} unit={newUnit}  />)\r\n            break;\r\n\r\n            case \"colorPicker\": \r\n            console.log(\"COLORPICKER\")\r\n           \r\n            inputArray.push(<Input key={newId} id={newId} unit={null} value={inputIterable[0].default[index]} color={true}/>)\r\n\r\n            break;\r\n            case \"rangeInput\":\r\n\r\n            inputArray.push(<RangeInput key={newId} iterable={newiterable} unit={newUnit} />)\r\n\r\n            break;\r\n\r\n            default:\r\n            inputArray.push(<Input key={newId} iterable={newiterable} unit={newUnit} />)\r\n            break;\r\n        }\r\n\r\n    })\r\n    \r\n    return inputArray\r\n}\r\n\r\n\r\nexport const payloadGenerator = (type) => {\r\n    const newTabTypes = TextureTypes\r\n  \r\n    return {\r\n      id: _uniqueId(`${type}-`),\r\n      type: type,\r\n      TextureTypes: newTabTypes\r\n    }\r\n  }\r\n\r\n","C:\\Work\\Vectary\\backup\\material_ui\\src\\components\\dropdown.jsx",["206","207","208","209","210","211"],{"ruleId":"212","severity":1,"message":"213","line":40,"column":9,"nodeType":"214","messageId":"215","endLine":40,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":76,"column":8,"nodeType":"218","endLine":76,"endColumn":28,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":258,"column":17,"nodeType":"222","endLine":258,"endColumn":72},{"ruleId":"220","severity":1,"message":"221","line":267,"column":15,"nodeType":"222","endLine":267,"endColumn":70},{"ruleId":"212","severity":1,"message":"223","line":9,"column":7,"nodeType":"214","messageId":"215","endLine":9,"endColumn":13},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","replacedBy":"227"},{"ruleId":"212","severity":1,"message":"228","line":4,"column":8,"nodeType":"214","messageId":"215","endLine":4,"endColumn":14},{"ruleId":"212","severity":1,"message":"229","line":12,"column":9,"nodeType":"214","messageId":"215","endLine":12,"endColumn":21},{"ruleId":"212","severity":1,"message":"230","line":1,"column":8,"nodeType":"214","messageId":"215","endLine":1,"endColumn":13},{"ruleId":"212","severity":1,"message":"231","line":1,"column":16,"nodeType":"214","messageId":"215","endLine":1,"endColumn":24},{"ruleId":"212","severity":1,"message":"232","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":17},{"ruleId":"224","replacedBy":"233"},{"ruleId":"226","replacedBy":"234"},{"ruleId":"212","severity":1,"message":"232","line":4,"column":8,"nodeType":"214","messageId":"215","endLine":4,"endColumn":17},{"ruleId":"212","severity":1,"message":"235","line":9,"column":16,"nodeType":"214","messageId":"215","endLine":9,"endColumn":22},{"ruleId":"212","severity":1,"message":"236","line":26,"column":8,"nodeType":"214","messageId":"215","endLine":26,"endColumn":20},{"ruleId":"212","severity":1,"message":"237","line":32,"column":10,"nodeType":"214","messageId":"215","endLine":32,"endColumn":21},{"ruleId":"216","severity":1,"message":"238","line":42,"column":6,"nodeType":"218","endLine":42,"endColumn":20,"suggestions":"239"},{"ruleId":"240","severity":1,"message":"241","line":20,"column":107,"nodeType":"242","messageId":"243","endLine":20,"endColumn":109},{"ruleId":"224","replacedBy":"244"},{"ruleId":"226","replacedBy":"245"},{"ruleId":"212","severity":1,"message":"246","line":1,"column":17,"nodeType":"214","messageId":"215","endLine":1,"endColumn":26},{"ruleId":"212","severity":1,"message":"247","line":3,"column":8,"nodeType":"214","messageId":"215","endLine":3,"endColumn":16},{"ruleId":"212","severity":1,"message":"248","line":7,"column":12,"nodeType":"214","messageId":"215","endLine":7,"endColumn":28},{"ruleId":"212","severity":1,"message":"249","line":7,"column":30,"nodeType":"214","messageId":"215","endLine":7,"endColumn":49},{"ruleId":"224","replacedBy":"250"},{"ruleId":"226","replacedBy":"251"},{"ruleId":"212","severity":1,"message":"246","line":1,"column":16,"nodeType":"214","messageId":"215","endLine":1,"endColumn":25},{"ruleId":"220","severity":1,"message":"221","line":33,"column":122,"nodeType":"222","endLine":33,"endColumn":145},{"ruleId":"220","severity":1,"message":"221","line":34,"column":122,"nodeType":"222","endLine":34,"endColumn":145},{"ruleId":"220","severity":1,"message":"221","line":35,"column":97,"nodeType":"222","endLine":35,"endColumn":116},{"ruleId":"212","severity":1,"message":"252","line":18,"column":9,"nodeType":"214","messageId":"215","endLine":18,"endColumn":18},{"ruleId":"212","severity":1,"message":"253","line":24,"column":12,"nodeType":"214","messageId":"215","endLine":24,"endColumn":24},{"ruleId":"254","severity":1,"message":"255","line":35,"column":9,"nodeType":"256","messageId":"257","endLine":49,"endColumn":10},{"ruleId":"216","severity":1,"message":"258","line":51,"column":8,"nodeType":"218","endLine":51,"endColumn":18,"suggestions":"259"},{"ruleId":"254","severity":1,"message":"255","line":55,"column":9,"nodeType":"256","messageId":"257","endLine":69,"endColumn":10},{"ruleId":"216","severity":1,"message":"260","line":72,"column":8,"nodeType":"218","endLine":72,"endColumn":18,"suggestions":"261"},{"ruleId":"262","severity":1,"message":"263","line":129,"column":13,"nodeType":"264","messageId":"243","endLine":129,"endColumn":23},{"ruleId":"212","severity":1,"message":"213","line":37,"column":9,"nodeType":"214","messageId":"215","endLine":37,"endColumn":12},{"ruleId":"216","severity":1,"message":"265","line":57,"column":8,"nodeType":"218","endLine":57,"endColumn":28,"suggestions":"266"},{"ruleId":"220","severity":1,"message":"221","line":233,"column":17,"nodeType":"222","endLine":233,"endColumn":75},{"ruleId":"212","severity":1,"message":"267","line":7,"column":8,"nodeType":"214","messageId":"215","endLine":7,"endColumn":19},{"ruleId":"212","severity":1,"message":"268","line":8,"column":8,"nodeType":"214","messageId":"215","endLine":8,"endColumn":21},{"ruleId":"212","severity":1,"message":"269","line":22,"column":12,"nodeType":"214","messageId":"215","endLine":22,"endColumn":22},{"ruleId":"212","severity":1,"message":"270","line":22,"column":24,"nodeType":"214","messageId":"215","endLine":22,"endColumn":37},{"ruleId":"212","severity":1,"message":"271","line":32,"column":9,"nodeType":"214","messageId":"215","endLine":32,"endColumn":16},{"ruleId":"216","severity":1,"message":"272","line":48,"column":8,"nodeType":"218","endLine":48,"endColumn":15,"suggestions":"273"},{"ruleId":"212","severity":1,"message":"213","line":98,"column":13,"nodeType":"214","messageId":"215","endLine":98,"endColumn":16},{"ruleId":"220","severity":1,"message":"221","line":196,"column":17,"nodeType":"222","endLine":196,"endColumn":72},{"ruleId":"220","severity":1,"message":"221","line":205,"column":15,"nodeType":"222","endLine":205,"endColumn":70},{"ruleId":"212","severity":1,"message":"274","line":1,"column":58,"nodeType":"214","messageId":"215","endLine":1,"endColumn":73},{"ruleId":"212","severity":1,"message":"275","line":10,"column":9,"nodeType":"214","messageId":"215","endLine":10,"endColumn":25},{"ruleId":"216","severity":1,"message":"276","line":61,"column":8,"nodeType":"218","endLine":61,"endColumn":10,"suggestions":"277"},{"ruleId":"240","severity":1,"message":"241","line":78,"column":75,"nodeType":"242","messageId":"243","endLine":78,"endColumn":77},{"ruleId":"216","severity":1,"message":"278","line":83,"column":8,"nodeType":"218","endLine":83,"endColumn":19,"suggestions":"279"},{"ruleId":"216","severity":1,"message":"280","line":94,"column":8,"nodeType":"218","endLine":94,"endColumn":18,"suggestions":"281"},{"ruleId":"216","severity":1,"message":"282","line":100,"column":8,"nodeType":"218","endLine":100,"endColumn":49,"suggestions":"283"},{"ruleId":"216","severity":1,"message":"284","line":123,"column":8,"nodeType":"218","endLine":123,"endColumn":23,"suggestions":"285"},{"ruleId":"240","severity":1,"message":"286","line":129,"column":42,"nodeType":"242","messageId":"243","endLine":129,"endColumn":44},{"ruleId":"287","severity":1,"message":"288","line":143,"column":17,"nodeType":"289","endLine":143,"endColumn":36},{"ruleId":"240","severity":1,"message":"286","line":162,"column":34,"nodeType":"242","messageId":"243","endLine":162,"endColumn":36},{"ruleId":"212","severity":1,"message":"290","line":1,"column":38,"nodeType":"214","messageId":"215","endLine":1,"endColumn":44},{"ruleId":"212","severity":1,"message":"274","line":1,"column":58,"nodeType":"214","messageId":"215","endLine":1,"endColumn":73},{"ruleId":"212","severity":1,"message":"291","line":36,"column":9,"nodeType":"214","messageId":"215","endLine":36,"endColumn":13},{"ruleId":"212","severity":1,"message":"292","line":38,"column":9,"nodeType":"214","messageId":"215","endLine":38,"endColumn":20},{"ruleId":"212","severity":1,"message":"293","line":50,"column":11,"nodeType":"214","messageId":"215","endLine":50,"endColumn":18},{"ruleId":"240","severity":1,"message":"241","line":57,"column":14,"nodeType":"242","messageId":"243","endLine":57,"endColumn":16},{"ruleId":"216","severity":1,"message":"294","line":85,"column":8,"nodeType":"218","endLine":85,"endColumn":10,"suggestions":"295"},{"ruleId":"240","severity":1,"message":"241","line":100,"column":75,"nodeType":"242","messageId":"243","endLine":100,"endColumn":77},{"ruleId":"216","severity":1,"message":"296","line":114,"column":8,"nodeType":"218","endLine":114,"endColumn":19,"suggestions":"297"},{"ruleId":"220","severity":1,"message":"221","line":131,"column":13,"nodeType":"222","endLine":131,"endColumn":49},{"ruleId":"298","severity":1,"message":"299","line":146,"column":42,"nodeType":"300","messageId":"301","endLine":146,"endColumn":44},{"ruleId":"298","severity":1,"message":"299","line":146,"column":65,"nodeType":"300","messageId":"301","endLine":146,"endColumn":67},{"ruleId":"212","severity":1,"message":"274","line":1,"column":57,"nodeType":"214","messageId":"215","endLine":1,"endColumn":72},{"ruleId":"212","severity":1,"message":"302","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":17},{"ruleId":"216","severity":1,"message":"303","line":33,"column":8,"nodeType":"218","endLine":33,"endColumn":26,"suggestions":"304"},{"ruleId":"305","severity":1,"message":"306","line":36,"column":1,"nodeType":"307","messageId":"243","endLine":38,"endColumn":4},{"ruleId":"216","severity":1,"message":"308","line":72,"column":8,"nodeType":"218","endLine":72,"endColumn":49,"suggestions":"309"},{"ruleId":"216","severity":1,"message":"310","line":103,"column":7,"nodeType":"218","endLine":103,"endColumn":66,"suggestions":"311"},{"ruleId":"212","severity":1,"message":"246","line":1,"column":17,"nodeType":"214","messageId":"215","endLine":1,"endColumn":26},{"ruleId":"212","severity":1,"message":"312","line":2,"column":10,"nodeType":"214","messageId":"215","endLine":2,"endColumn":24},{"ruleId":"212","severity":1,"message":"313","line":10,"column":9,"nodeType":"214","messageId":"215","endLine":10,"endColumn":13},{"ruleId":"212","severity":1,"message":"314","line":10,"column":10,"nodeType":"214","messageId":"215","endLine":10,"endColumn":15},{"ruleId":"212","severity":1,"message":"315","line":26,"column":12,"nodeType":"214","messageId":"215","endLine":26,"endColumn":24},{"ruleId":"212","severity":1,"message":"213","line":40,"column":9,"nodeType":"214","messageId":"215","endLine":40,"endColumn":12},{"ruleId":"216","severity":1,"message":"217","line":76,"column":8,"nodeType":"218","endLine":76,"endColumn":28,"suggestions":"316"},{"ruleId":"220","severity":1,"message":"221","line":263,"column":17,"nodeType":"222","endLine":263,"endColumn":72},{"ruleId":"220","severity":1,"message":"221","line":272,"column":15,"nodeType":"222","endLine":272,"endColumn":70},{"ruleId":"212","severity":1,"message":"230","line":1,"column":8,"nodeType":"214","messageId":"215","endLine":1,"endColumn":13},{"ruleId":"317","severity":1,"message":"318","line":33,"column":13,"nodeType":"319","messageId":"320","endLine":33,"endColumn":19},{"ruleId":"254","severity":1,"message":"255","line":55,"column":5,"nodeType":"256","messageId":"257","endLine":62,"endColumn":6},{"ruleId":"321","severity":1,"message":"322","line":68,"column":55,"nodeType":"323","messageId":"324","endLine":68,"endColumn":57},{"ruleId":"254","severity":1,"message":"255","line":70,"column":9,"nodeType":"256","messageId":"257","endLine":136,"endColumn":10},{"ruleId":"254","severity":1,"message":"255","line":103,"column":21,"nodeType":"256","messageId":"257","endLine":116,"endColumn":22},{"ruleId":"321","severity":1,"message":"322","line":149,"column":37,"nodeType":"323","messageId":"324","endLine":149,"endColumn":39},{"ruleId":"240","severity":1,"message":"286","line":151,"column":68,"nodeType":"242","messageId":"243","endLine":151,"endColumn":70},{"ruleId":"212","severity":1,"message":"325","line":1,"column":17,"nodeType":"214","messageId":"215","endLine":1,"endColumn":27},{"ruleId":"240","severity":1,"message":"241","line":54,"column":60,"nodeType":"242","messageId":"243","endLine":54,"endColumn":62},{"ruleId":"240","severity":1,"message":"241","line":60,"column":20,"nodeType":"242","messageId":"243","endLine":60,"endColumn":22},{"ruleId":"220","severity":1,"message":"221","line":68,"column":17,"nodeType":"222","endLine":68,"endColumn":146},{"ruleId":"240","severity":1,"message":"241","line":68,"column":32,"nodeType":"242","messageId":"243","endLine":68,"endColumn":34},{"ruleId":"220","severity":1,"message":"221","line":72,"column":18,"nodeType":"222","endLine":74,"endColumn":73},"no-unused-vars","'num' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dynamicValue' and 'unit'. Either include them or remove the dependency array.","ArrayExpression",["326"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'reload' is assigned a value but never used.","no-native-reassign",["327"],"no-negated-in-lhs",["328"],"'Switch' is defined but never used.","'handleChange' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","'_uniqueId' is defined but never used.",["327"],["328"],"'uuidv4' is defined but never used.","'GrowingInput' is defined but never used.","'globalState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["329"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["327"],["328"],"'useEffect' is defined but never used.","'Material' is defined but never used.","'legacyCodeLoader' is assigned a value but never used.","'setLegacyCodeLoader' is assigned a value but never used.",["327"],["328"],"'hasButton' is assigned a value but never used.","'lastPosition' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'progress'. Either include it or remove the dependency array.",["330"],"React Hook useEffect has a missing dependency: 'propName'. Either include it or remove the dependency array.",["331"],"no-dupe-keys","Duplicate key 'background'.","ObjectExpression","React Hook useEffect has a missing dependency: 'dynamicValue'. Either include it or remove the dependency array. You can also do a functional update 'setDynamicValue(d => ...)' if you only need 'dynamicValue' in the 'setDynamicValue' call.",["332"],"'ArrowGrowUp' is defined but never used.","'ArrowGrowDown' is defined but never used.","'multiplyer' is assigned a value but never used.","'setMultiplyer' is assigned a value but never used.","'counter' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'unit'. Either include it or remove the dependency array.",["333"],"'useLayoutEffect' is defined but never used.","'payloadGenerator' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'newId', and 'propName'. Either include them or remove the dependency array.",["334"],"React Hook useEffect has missing dependencies: 'dispatch', 'globalState', 'id', 'path', and 'propName'. Either include them or remove the dependency array.",["335"],"React Hook useEffect has missing dependencies: 'dispatch', 'id', and 'path'. Either include them or remove the dependency array.",["336"],"React Hook useEffect has missing dependencies: 'id' and 'propName'. Either include them or remove the dependency array.",["337"],"React Hook useEffect has a missing dependency: 'maximum'. Either include it or remove the dependency array.",["338"],"Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useRef' is defined but never used.","'plus' is assigned a value but never used.","'buttonClick' is assigned a value but never used.","'payload' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'icon', 'input', 'label', 'mainProperty', 'newId', and 'type'. Either include them or remove the dependency array.",["339"],"React Hook useEffect has missing dependencies: 'dispatch', 'globalState', 'icon', 'id', 'label', 'path', and 'toggleDorpdown'. Either include them or remove the dependency array. You can also do a functional update 'setToggleDropdown(t => ...)' if you only need 'toggleDorpdown' in the 'setToggleDropdown' call.",["340"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'Draggable' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["341"],"no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","React Hook useEffect has a missing dependency: 'globalState'. Either include it or remove the dependency array.",["342"],"React Hook useEffect has a missing dependency: 'globalState.MaterialPorperties'. Either include it or remove the dependency array.",["343"],"'generateInputs' is defined but never used.","'unit' is assigned a value but never used.","'parse' is defined but never used.","'editableText' is assigned a value but never used.",["344"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useContext' is defined but never used.",{"desc":"345","fix":"346"},"no-global-assign","no-unsafe-negation",{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"349","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"345","fix":"376"},"Update the dependencies array to be: [dynamicValue, multiplyer, unit, update]",{"range":"377","text":"378"},"Update the dependencies array to be: [WorkSpaceRef, dispatch]",{"range":"379","text":"380"},"Update the dependencies array to be: [progress, propName]",{"range":"381","text":"382"},{"range":"383","text":"382"},"Update the dependencies array to be: [dynamicValue, multiplyer, update]",{"range":"384","text":"385"},"Update the dependencies array to be: [unit, value]",{"range":"386","text":"387"},"Update the dependencies array to be: [dispatch, newId, propName]",{"range":"388","text":"389"},"Update the dependencies array to be: [dispatch, globalState, id, openPopup, path, propName]",{"range":"390","text":"391"},"Update the dependencies array to be: [dispatch, id, path, progress]",{"range":"392","text":"393"},"Update the dependencies array to be: [globalState.MetaData.activeTexturePopup, id, propName]",{"range":"394","text":"395"},"Update the dependencies array to be: [progress, max, maximum]",{"range":"396","text":"397"},"Update the dependencies array to be: [dispatch, icon, input, label, mainProperty, newId, type]",{"range":"398","text":"399"},"Update the dependencies array to be: [dispatch, globalState, icon, id, label, openPopup, path, toggleDorpdown]",{"range":"400","text":"401"},"Update the dependencies array to be: [ref, globalState, dispatch]",{"range":"402","text":"403"},"Update the dependencies array to be: [globalState, globalState.MetaData.activeTexturePopup]",{"range":"404","text":"405"},"Update the dependencies array to be: [activeProperty, activeTexture, activeTab, activeType, open, globalState.MaterialPorperties]",{"range":"406","text":"407"},{"range":"408","text":"378"},[1974,1994],"[dynamicValue, multiplyer, unit, update]",[1428,1442],"[WorkSpaceRef, dispatch]",[1414,1424],"[progress, propName]",[2018,2028],[1277,1297],"[dynamicValue, multiplyer, update]",[1057,1064],"[unit, value]",[1593,1595],"[dispatch, newId, propName]",[2425,2436],"[dispatch, globalState, id, openPopup, path, propName]",[2736,2746],"[dispatch, id, path, progress]",[2889,2930],"[globalState.MetaData.activeTexturePopup, id, propName]",[3466,3481],"[progress, max, maximum]",[2552,2554],"[dispatch, icon, input, label, mainProperty, newId, type]",[3696,3707],"[dispatch, globalState, icon, id, label, openPopup, path, toggleDorpdown]",[1199,1217],"[ref, globalState, dispatch]",[2692,2733],"[globalState, globalState.MetaData.activeTexturePopup]",[3752,3811],"[activeProperty, activeTexture, activeTab, activeType, open, globalState.MaterialPorperties]",[2083,2103]]